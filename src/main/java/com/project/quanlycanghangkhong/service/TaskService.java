package com.project.quanlycanghangkhong.service;

import com.project.quanlycanghangkhong.request.CreateTaskRequest;
import com.project.quanlycanghangkhong.request.CreateSubtaskRequest;
import com.project.quanlycanghangkhong.dto.TaskDTO;
import com.project.quanlycanghangkhong.dto.TaskDetailDTO;
import com.project.quanlycanghangkhong.dto.UpdateTaskDTO;
import com.project.quanlycanghangkhong.dto.AttachmentDTO;

// ‚úÖ PRIORITY 3: Simplified DTOs imports

import java.util.List;

public interface TaskService {
    /**
     * T·∫°o task v·ªõi assignment v√† attachment tr·ª±c ti·∫øp
     * THAY ƒê·ªîI LOGIC NGHI·ªÜP V·ª§: Thay th·∫ø c√°ch ti·∫øp c·∫≠n d·ª±a tr√™n document b·∫±ng vi·ªác g√°n attachment tr·ª±c ti·∫øp
     * @param request Y√™u c·∫ßu t·∫°o task v·ªõi danh s√°ch ID attachment
     * @return DTO task ƒë√£ t·∫°o
     */
    TaskDTO createTaskWithAssignmentsAndAttachments(CreateTaskRequest request);
    TaskDTO createTask(TaskDTO taskDTO);
    TaskDTO updateTask(Integer id, UpdateTaskDTO updateTaskDTO);
    void deleteTask(Integer id);
    void bulkDeleteTasks(List<Integer> taskIds);
    TaskDTO getTaskById(Integer id);
    List<TaskDTO> getAllTasks();
    TaskDetailDTO getTaskDetailById(Integer id);
    List<TaskDetailDTO> getAllTaskDetails();
    void updateTaskStatus(com.project.quanlycanghangkhong.model.Task task);
    
    // Method m·ªõi ƒë·ªÉ l·∫•y task theo lo·∫°i
    List<TaskDetailDTO> getMyTasks(String type);
    
    /**
     * L·∫•y tasks v·ªõi count information
     * @param type Lo·∫°i task (created, assigned, received)
     * @return Response bao g·ªìm danh s√°ch task v√† count metadata
     */
    com.project.quanlycanghangkhong.dto.response.task.MyTasksResponse getMyTasksWithCount(String type);
    
    /**
     * L·∫•y tasks v·ªõi count information - STANDARDIZED VERSION
     * Returns data in standardized ApiResponseCustom structure
     * @param type Lo·∫°i task (created, assigned, received)
     * @return MyTasksData v·ªõi c·∫•u tr√∫c chu·∫©n h√≥a
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithCountStandardized(String type);
    
    /**
     * L·∫•y tasks v·ªõi count information v√† filter - STANDARDIZED VERSION WITH FILTER
     * Returns data in standardized ApiResponseCustom structure v·ªõi filter support
     * @param type Lo·∫°i task (created, assigned, received)
     * @param filter Filter √°p d·ª•ng (ch·ªâ cho type=assigned): completed, pending, urgent, overdue
     * @return MyTasksData v·ªõi c·∫•u tr√∫c chu·∫©n h√≥a ƒë√£ ƒë∆∞·ª£c filter
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithCountStandardized(String type, String status);
    
    /**
     * L·∫•y tasks v·ªõi count information v√† PAGINATION - STANDARDIZED VERSION WITH PAGINATION
     * Returns data in standardized ApiResponseCustom structure v·ªõi pagination support
     * @param type Lo·∫°i task (created, assigned, received)
     * @param filter Filter √°p d·ª•ng (ch·ªâ cho type=assigned): completed, pending, urgent, overdue
     * @param page S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)
     * @param size S·ªë l∆∞·ª£ng items per page (max 100)
     * @return MyTasksData v·ªõi c·∫•u tr√∫c chu·∫©n h√≥a ƒë√£ ƒë∆∞·ª£c ph√¢n trang
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithCountStandardizedAndPagination(String type, String status, Integer page, Integer size);
    
    /**
     * üöÄ ULTRA OPTIMIZED: Get my tasks with batch loading - Performance target <500ms
     * Zero N+1 queries, batch loading for all relationships
     * @param type Task type (created, assigned, received)
     * @return MyTasksData with ultra-fast performance
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithCountStandardizedUltraFast(String type);
    
    /**
     * T√¨m ki·∫øm n√¢ng cao tasks v·ªõi nhi·ªÅu ti√™u ch√≠ - ADVANCED SEARCH (query parameters)
     * Ch·ªâ √°p d·ª•ng cho type=assigned v·ªõi c√°c ti√™u ch√≠ t√¨m ki·∫øm n√¢ng cao qua query parameters
     * @param type Lo·∫°i task (ch·ªâ "assigned" ƒë∆∞·ª£c h·ªó tr·ª£)
     * @param filter Filter type: completed, pending, urgent, overdue
     * @param keyword T·ª´ kh√≥a t√¨m ki·∫øm trong title/content
     * @param startTime Th·ªùi gian b·∫Øt ƒë·∫ßu (ISO format)
     * @param endTime Th·ªùi gian k·∫øt th√∫c (ISO format) 
    // M√î H√åNH ADJACENCY LIST: C√°c method subtask cho c·∫•u tr√∫c ph√¢n c·∫•p
    
    /**
     * T·∫°o subtask d∆∞·ªõi m·ªôt task cha trong m√¥ h√¨nh Adjacency List
     * @param parentId ID task cha (t·ª´ path parameter)
     * @param request Y√™u c·∫ßu t·∫°o subtask (kh√¥ng ch·ª©a parentId)
     * @return DTO subtask ƒë√£ t·∫°o
     */
    TaskDTO createSubtask(Integer parentId, CreateSubtaskRequest request);
    
    /**
     * L·∫•y t·∫•t c·∫£ subtask (task con) c·ªßa m·ªôt task cha trong m√¥ h√¨nh Adjacency List
     * @param parentId ID task cha
     * @return Danh s√°ch task con
    /**
     * L·∫•y t·∫•t c·∫£ subtask (task con) c·ªßa m·ªôt task cha trong m√¥ h√¨nh Adjacency List
     * @param parentId ID task cha
     * @return Danh s√°ch task con
     */
    List<TaskDetailDTO> getSubtasks(Integer parentId);
    
    /**
     * L·∫•y to√†n b·ªô c√¢y con (subtree) c·ªßa m·ªôt task - bao g·ªìm task ƒë√≥ v√† t·∫•t c·∫£ subtask b√™n d∆∞·ªõi
     * @param taskId ID task g·ªëc ƒë·ªÉ l·∫•y c√¢y con
     * @return Danh s√°ch task theo th·ª© t·ª± depth-first (task cha tr∆∞·ªõc, subtask sau)
     */
    List<TaskDetailDTO> getTaskSubtree(Integer taskId);
    
    /**
     * L·∫•y to√†n b·ªô c√¢y con (subtree) c·ªßa m·ªôt task v·ªõi TaskSubtreeDTO
     * @param taskId ID task g·ªëc ƒë·ªÉ l·∫•y c√¢y con
     * @return Danh s√°ch TaskSubtreeDTO theo th·ª© t·ª± depth-first (task cha tr∆∞·ªõc, subtask sau)
     */
    List<com.project.quanlycanghangkhong.dto.TaskSubtreeDTO> getTaskSubtreeAsSubtreeDTO(Integer taskId);
    
    /**
     * L·∫•y to√†n b·ªô c√¢y con (subtree) v·ªõi c·∫•u tr√∫c ph√¢n c·∫•p nested - d·ªÖ d√†ng cho frontend hi·ªÉn th·ªã
     * @param taskId ID task g·ªëc ƒë·ªÉ l·∫•y c√¢y con
     * @return TaskTreeDTO v·ªõi c·∫•u tr√∫c nested hierarchy
     */
    com.project.quanlycanghangkhong.dto.TaskTreeDTO getTaskSubtreeHierarchical(Integer taskId);
    
    // === ATTACHMENT MANAGEMENT ===
    // Attachment ch·ªâ ƒë∆∞·ª£c qu·∫£n l√Ω th√¥ng qua createTask v√† updateTask
    // ƒê√£ lo·∫°i b·ªè assignAttachmentsToTask v√† removeAttachmentsFromTask
    
    /**
     * L·∫•y t·∫•t c·∫£ attachment ƒë∆∞·ª£c li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi m·ªôt task
     * THAY ƒê·ªîI LOGIC NGHI·ªÜP V·ª§: Truy v·∫•n quan h·ªá task-attachment tr·ª±c ti·∫øp
     * @param taskId ID Task
     * @return Danh s√°ch attachment ƒë∆∞·ª£c li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi task
     */
    List<AttachmentDTO> getTaskAttachments(Integer taskId);
    
    /**
     * Th√™m attachments v√†o task c·ª• th·ªÉ
     * @param taskId ID c·ªßa task
     * @param attachmentIds Danh s√°ch ID attachment c·∫ßn th√™m
     * @return Danh s√°ch attachment ƒë√£ ƒë∆∞·ª£c th√™m
     */
    List<AttachmentDTO> addAttachmentsToTask(Integer taskId, List<Integer> attachmentIds);
    
    /**
     * X√≥a attachments kh·ªèi task c·ª• th·ªÉ
     * @param taskId ID c·ªßa task
     * @param attachmentIds Danh s√°ch ID attachment c·∫ßn x√≥a
     * @return S·ªë l∆∞·ª£ng attachment ƒë√£ ƒë∆∞·ª£c x√≥a
     */
    int removeAttachmentsFromTask(Integer taskId, List<Integer> attachmentIds);
    
    // ============== SEARCH & FILTER METHODS ==============
    
    // ============== DATABASE-LEVEL PAGINATION METHODS (OPTIMIZED) ==============
    
    /**
     * üöÄ DATABASE PAGINATION: Get my tasks with database-level pagination (1-based)
     * Performance: Uses LIMIT/OFFSET at database level instead of memory slicing
     * @param type Task type (created, assigned, received)
     * @param filter Filter (only for assigned type)
     * @param page Page number (1-based: 1, 2, 3...)
     * @param size Page size (max 100, default 20)
     * @return MyTasksData with pagination info
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithCountStandardizedAndPaginationOptimized(
        String type, String status, Integer page, Integer size);
    
    /**
     * üöÄ DATABASE PAGINATION: Advanced search with database-level pagination (1-based)
     * Performance: Uses LIMIT/OFFSET at database level for advanced search
     * @param type Task type (only assigned supported)
     * @param filter Filter type
     * @param keyword Search keyword
     * @param startTime Start time filter
     * @param endTime End time filter
     * @param priorities Priority list
     * @param recipientTypes Recipient type list
     * @param recipientIds Recipient ID list
     * @param page Page number (1-based: 1, 2, 3...)
     * @param size Page size (max 100, default 20)
     * @return MyTasksData with pagination info
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getMyTasksWithAdvancedSearchAndPaginationOptimized(
        String type, String status, String keyword, String startTime, String endTime,
        java.util.List<String> priorities, java.util.List<String> recipientTypes, java.util.List<Integer> recipientIds,
        java.util.List<Integer> taskTypeIds, Integer page, Integer size);

    // ============== UNIT TASKS METHODS (ROLE-BASED PERMISSIONS) ==============
    
    /**
     * üè¢ UNIT TASKS: Get all tasks with role-based permissions
     * ADMIN/DIRECTOR/VICE_DIRECTOR: Xem t·∫•t c·∫£ tasks
     * C√°c role kh√°c: Ch·ªâ xem tasks c·ªßa team m√¨nh
     * @param status Status filter (optional)
     * @return MyTasksData with role-based filtered tasks
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getUnitTasks(String status);
    
    /**
     * üè¢ UNIT TASKS: Get tasks with pagination and role-based permissions
     * @param status Status filter (optional)
     * @param page Page number (1-based)
     * @param size Page size
     * @return MyTasksData with pagination and role-based filtering
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getUnitTasksWithPagination(String status, Integer page, Integer size);
    
    /**
     * üè¢ UNIT TASKS: Get tasks with advanced search, pagination and role-based permissions
     * @param status Status filter (optional)
     * @param keyword Search keyword
     * @param startTime Start time filter
     * @param endTime End time filter
     * @param priorities Priority filters
     * @param page Page number (1-based)
     * @param size Page size
     * @return MyTasksData with advanced search and role-based filtering
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getUnitTasksWithAdvancedSearchAndPagination(
        String status, String keyword, String startTime, String endTime, 
        java.util.List<String> priorities, Integer page, Integer size);
    
    /**
     * üè¢ COMPANY TASKS: Get tasks with advanced search, pagination, role-based permissions and recipient search
     * @param status Status filter (optional)
     * @param keyword Search keyword
     * @param startTime Start time filter
     * @param endTime End time filter
     * @param priorities Priority filters
     * @param recipientTypes Recipient types (USER, TEAM, UNIT)
     * @param recipientIds Recipient IDs
     * @param page Page number (1-based)
     * @param size Page size
     * @return MyTasksData with advanced search, role-based filtering and recipient search
     */
    com.project.quanlycanghangkhong.dto.MyTasksData getCompanyTasksWithAdvancedSearchAndPagination(
        String status, String keyword, String startTime, String endTime, 
        java.util.List<String> priorities, java.util.List<String> recipientTypes, 
        java.util.List<Integer> recipientIds, java.util.List<Integer> taskTypeIds, Integer page, Integer size);
}