package com.project.quanlycanghangkhong.service.impl;

import com.project.quanlycanghangkhong.dto.AttachmentDTO;
import com.project.quanlycanghangkhong.model.Attachment;
import com.project.quanlycanghangkhong.model.User;
import com.project.quanlycanghangkhong.repository.AttachmentRepository;
import com.project.quanlycanghangkhong.repository.UserRepository;
import com.project.quanlycanghangkhong.service.AttachmentService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class AttachmentServiceImpl implements AttachmentService {
    @Autowired
    private AttachmentRepository attachmentRepository;
    @Autowired
    private UserRepository userRepository;

    /**
     * L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ SecurityContext
     * @return User hi·ªán t·∫°i ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    private User getCurrentUser() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.getName() != null) {
                String email = authentication.getName();
                return userRepository.findByEmail(email).orElse(null);
            }
        } catch (Exception e) {
            // Log error n·∫øu c·∫ßn
        }
        return null;
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† owner c·ªßa attachment kh√¥ng
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† owner, false n·∫øu kh√¥ng
     */
    private boolean isOwner(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Ch·ªâ ki·ªÉm tra owner - ai upload file th√¨ to√†n quy·ªÅn file ƒë√≥
        return attachment.getUploadedBy() != null && 
               attachment.getUploadedBy().getId().equals(currentUser.getId());
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn truy c·∫≠p attachment kh√¥ng (ch·ªâ owner)
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu c√≥ quy·ªÅn truy c·∫≠p, false n·∫øu kh√¥ng
     */
    private boolean hasReadAccess(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // ADMIN c√≥ full quy·ªÅn
        if (isAdmin()) return true;
        
        // Ch·ªâ owner c√≥ quy·ªÅn
        return isOwner(attachment);
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn ch·ªânh s·ª≠a attachment kh√¥ng (ch·ªâ owner)
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu c√≥ quy·ªÅn ch·ªânh s·ª≠a, false n·∫øu kh√¥ng
     */
    private boolean hasWriteAccess(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // ADMIN c√≥ full quy·ªÅn ch·ªânh s·ª≠a
        if (isAdmin()) return true;
        
        // Ch·ªâ owner c√≥ quy·ªÅn ch·ªânh s·ª≠a
        return isOwner(attachment);
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† admin kh√¥ng
     * @return true n·∫øu l√† admin, false n·∫øu kh√¥ng
     */
    private boolean isAdmin() {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Ki·ªÉm tra role admin th√¥ng qua Role entity
        if (currentUser.getRole() != null && currentUser.getRole().getRoleName() != null) {
            String roleName = currentUser.getRole().getRoleName();
            return "ADMIN".equals(roleName);
        }
        
        // Backup check qua email n·∫øu role kh√¥ng c√≥
        return "admin@admin.com".equals(currentUser.getEmail());
    }

    private AttachmentDTO toDTO(Attachment att) {
        AttachmentDTO dto = new AttachmentDTO();
        dto.setId(att.getId());
        dto.setFilePath(att.getFilePath());
        dto.setFileName(att.getFileName());
        dto.setFileSize(att.getFileSize());
        dto.setCreatedAt(att.getCreatedAt());
        
        // Map owner information
        if (att.getUploadedBy() != null) {
            com.project.quanlycanghangkhong.dto.UserDTO ownerDto = new com.project.quanlycanghangkhong.dto.UserDTO();
            ownerDto.setId(att.getUploadedBy().getId());
            ownerDto.setName(att.getUploadedBy().getName());
            ownerDto.setEmail(att.getUploadedBy().getEmail());
            dto.setUploadedBy(ownerDto);
        }
        
        return dto;
    }
    
    // THAY ƒê·ªîI LOGIC NGHI·ªÜP V·ª§: ƒê√£ chuy·ªÉn sang task-attachment tr·ª±c ti·∫øp
    // Document kh√¥ng c√≤n qu·∫£n l√Ω attachment n·ªØa
    /*
    @Override
    public AttachmentDTO addAttachmentToDocument(Integer documentId, AttachmentDTO dto) {
        Document doc = documentRepository.findById(documentId).orElse(null);
        if (doc == null) return null;
        Attachment att = new Attachment();
        att.setDocument(doc);
        att.setFilePath(dto.getFilePath());
        att.setFileName(dto.getFileName());
        att.setFileSize(dto.getFileSize());
        att.setCreatedAt(LocalDateTime.now());
        return toDTO(attachmentRepository.save(att));
    }
    */
    @Override
    public AttachmentDTO updateAttachment(Integer id, AttachmentDTO dto) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN WRITE (owner ho·∫∑c shared v·ªõi quy·ªÅn READ-write)
        if (!hasWriteAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a file n√†y. Ch·ªâ ng∆∞·ªùi upload file ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª quy·ªÅn ch·ªânh s·ª≠a m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
        }
        
        att.setFilePath(dto.getFilePath());
        att.setFileName(dto.getFileName());
        att.setFileSize(dto.getFileSize());
        Attachment saved = attachmentRepository.save(att);
        return toDTO(saved);
    }
    
    @Override
    public AttachmentDTO updateAttachmentFileName(Integer id, String fileName) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN WRITE (owner ho·∫∑c shared v·ªõi quy·ªÅn read-write)
        if (!hasWriteAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a file n√†y. Ch·ªâ ng∆∞·ªùi upload file ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª quy·ªÅn ch·ªânh s·ª≠a m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
        }
        
        att.setFileName(fileName);
        Attachment saved = attachmentRepository.save(att);
        return toDTO(saved);
    }
    
    @Override
    @org.springframework.transaction.annotation.Transactional
    public void deleteAttachment(Integer id) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att != null) {
            // ADMIN ho·∫∑c owner m·ªõi c√≥ quy·ªÅn x√≥a
            if (!isAdmin() && !isOwner(att)) {
                throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a file n√†y. Ch·ªâ ng∆∞·ªùi upload file ho·∫∑c admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
            }
            
            // Th·ª±c hi·ªán soft delete attachment
            att.setDeleted(true);
            attachmentRepository.save(att);
        }
    }
    
    // === BUSINESS LOGIC: CH·ªà S·ª¨ D·ª§NG TASK-ATTACHMENT TR·ª∞C TI·∫æP ===
    // Document ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè ho√†n to√†n kh·ªèi h·ªá th·ªëng qu·∫£n l√Ω file
    
    @Override
    public List<AttachmentDTO> getAllAttachments() {
        // Ki·ªÉm tra quy·ªÅn admin
        if (!isAdmin()) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y. Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem t·∫•t c·∫£ file.");
        }
        
        // Admin c√≥ th·ªÉ xem t·∫•t c·∫£ file, k·ªÉ c·∫£ file ƒë√£ b·ªã x√≥a m·ªÅm
        List<Attachment> allAttachments = attachmentRepository.findAll();
        return allAttachments.stream().map(this::toDTO).collect(Collectors.toList());
    }
    
    @Override
    public AttachmentDTO getAttachmentById(Integer id) {
        Attachment att = attachmentRepository.findByIdAndIsDeletedFalse(id);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN READ (owner ho·∫∑c ƒë∆∞·ª£c chia s·∫ª)
        if (!hasReadAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y.");
        }
        
        return toDTO(att);
    }
    
}
