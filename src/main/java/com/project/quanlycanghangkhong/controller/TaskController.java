package com.project.quanlycanghangkhong.controller;

import com.project.quanlycanghangkhong.request.CreateTaskRequest;
import com.project.quanlycanghangkhong.request.CreateSubtaskRequest;
import com.project.quanlycanghangkhong.dto.TaskDTO;
import com.project.quanlycanghangkhong.dto.TaskDetailDTO;
import com.project.quanlycanghangkhong.dto.TaskSubtreeDTO;
import com.project.quanlycanghangkhong.dto.UpdateTaskDTO;
import com.project.quanlycanghangkhong.dto.AttachmentDTO;
import com.project.quanlycanghangkhong.request.BulkDeleteTasksRequest;
import com.project.quanlycanghangkhong.dto.response.ApiResponseCustom;
import com.project.quanlycanghangkhong.dto.response.task.MyTasksApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskSubtreeApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskTreeApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskAttachmentsApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskSubtasksApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskApiResponse;
import com.project.quanlycanghangkhong.dto.response.task.TaskDetailApiResponse;
import com.project.quanlycanghangkhong.dto.MyTasksData;
import com.project.quanlycanghangkhong.dto.TaskTreeDTO;
import com.project.quanlycanghangkhong.request.TaskAttachmentUploadRequest;

// ‚úÖ PRIORITY 3: Simplified DTOs imports

import com.project.quanlycanghangkhong.service.TaskService;
import com.project.quanlycanghangkhong.service.OverdueTaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import javax.validation.Valid;

@RestController
@RequestMapping("/api/tasks")
@CrossOrigin(origins = "*")
public class TaskController {
    @Autowired
    private TaskService taskService;
    
    @Autowired
    private OverdueTaskService overdueTaskService;

    @PostMapping
    @Operation(summary = "T·∫°o task", description = "T·∫°o m·ªõi m·ªôt c√¥ng vi·ªác")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "T·∫°o th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskApiResponse.class)))
    })
    public ResponseEntity<ApiResponseCustom<TaskDTO>> createTask(@RequestBody CreateTaskRequest request) {
        System.out.println("[DEBUG] Received CreateTaskRequest: " + request);
        System.out.println("[DEBUG] Request class: " + (request != null ? request.getClass().getName() : "null"));
        if (request == null) {
            System.out.println("[DEBUG] Request is null!");
            return ResponseEntity.status(400).body(ApiResponseCustom.error("Request body is null"));
        } else {
            System.out.println("[DEBUG] Request title: " + request.getTitle());
            System.out.println("[DEBUG] Request content: " + request.getContent());
            System.out.println("[DEBUG] Request priority: " + request.getPriority());
            System.out.println("[DEBUG] Request assignments: " + request.getAssignments());
            System.out.println("[DEBUG] Request attachmentIds: " + request.getAttachmentIds());
        }
        TaskDTO created = taskService.createTaskWithAssignmentsAndAttachments(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponseCustom.created(created));
    }

    @PutMapping("/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t task", description = "C·∫≠p nh·∫≠t m·ªôt c√¥ng vi·ªác theo id")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<TaskDTO>> updateTask(@PathVariable Integer id,
            @RequestBody UpdateTaskDTO updateTaskDTO) {
        TaskDTO updated = taskService.updateTask(id, updateTaskDTO);
        if (updated == null)
            return ResponseEntity.status(404).body(ApiResponseCustom.notFound("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác"));
        return ResponseEntity.ok(ApiResponseCustom.updated(updated));
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Xo√° task", description = "Xo√° m·ªôt c√¥ng vi·ªác theo id")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Xo√° th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<Void>> deleteTask(@PathVariable Integer id) {
        taskService.deleteTask(id);
        return ResponseEntity.ok(ApiResponseCustom.deleted());
    }

    @DeleteMapping("/bulk-delete")
    @Operation(summary = "Xo√° nhi·ªÅu task", description = "Xo√° nhi·ªÅu c√¥ng vi·ªác c√πng l√∫c")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Xo√° th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class))),
            @ApiResponse(responseCode = "400", description = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<String>> bulkDeleteTasks(
            @Valid @RequestBody BulkDeleteTasksRequest request) {
        try {
            if (request.getTaskIds() == null || request.getTaskIds().isEmpty()) {
                return ResponseEntity.badRequest().body(
                        ApiResponseCustom.error("Danh s√°ch task ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"));
            }

            taskService.bulkDeleteTasks(request.getTaskIds());

            String message = "ƒê√£ xo√° th√†nh c√¥ng " + request.getTaskIds().size() + " task";
            return ResponseEntity.ok(ApiResponseCustom.success(message));

        } catch (Exception e) {
            return ResponseEntity.status(500).body(
                    ApiResponseCustom.internalError("L·ªói khi xo√° task: " + e.getMessage()));
        }
    }

    @GetMapping("/{id}")
    @Operation(summary = "L·∫•y chi ti·∫øt task", description = "L·∫•y chi ti·∫øt m·ªôt c√¥ng vi·ªác theo id")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskDetailApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<TaskDetailDTO>> getTaskDetailById(@PathVariable Integer id) {
        TaskDetailDTO task = taskService.getTaskDetailById(id);
        if (task == null)
            return ResponseEntity.status(404).body(ApiResponseCustom.notFound("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác"));
        return ResponseEntity.ok(ApiResponseCustom.success(task));
    }

    @GetMapping
    @Operation(summary = "L·∫•y danh s√°ch task", description = "L·∫•y danh s√°ch t·∫•t c·∫£ c√¥ng vi·ªác")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskSubtasksApiResponse.class)))
    })
    public ResponseEntity<ApiResponseCustom<List<TaskDetailDTO>>> getAllTaskDetails() {
        List<TaskDetailDTO> tasks = taskService.getAllTaskDetails();
        return ResponseEntity.ok(ApiResponseCustom.success(tasks));
    }

    @GetMapping("/my")
    @Operation(summary = "API t·ªïng h·ª£p: L·∫•y c√¥ng vi·ªác c·ªßa t√¥i v·ªõi advanced search, filter status, pagination", description = "üî• UNIFIED API cho t·∫•t c·∫£ task types v·ªõi advanced search v√† pagination. "
            +
            "üìã TASK TYPES: " +
            "‚Ä¢ created: Tasks ƒë√£ t·∫°o nh∆∞ng ch∆∞a giao vi·ªác (flat list) " +
            "‚Ä¢ assigned: Tasks ƒë√£ giao vi·ªác (bao g·ªìm subtasks v·ªõi hierarchy) " +
            "‚Ä¢ received: Tasks ƒë∆∞·ª£c giao (flat list) " +
            "üéØ STATUS FILTER (ch·ªâ cho assigned/received): IN_PROGRESS, COMPLETED, OVERDUE " +
            "üîç KEYWORD SEARCH (cho t·∫•t c·∫£ types): T√¨m ki·∫øm trong 5 fields - ID, title, content, instructions, notes " +
            "‚ö° ADVANCED FILTERS: priorities (LOW/NORMAL/HIGH/URGENT), time range (yyyy-MM-dd) " +
            "üë• RECIPIENT SEARCH (ch·ªâ cho assigned): teamIds, userIds, unitIds (ƒë∆°n gi·∫£n h∆°n recipientTypes/recipientIds) " +
            "üìÑ PAGINATION: page (1-based), size (max 100, default 20)")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = MyTasksApiResponse.class))),
            @ApiResponse(responseCode = "400", description = "Tham s·ªë kh√¥ng h·ª£p l·ªá", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<MyTasksData>> getMyTasks(
            @Parameter(description = "Lo·∫°i task", required = true, schema = @Schema(allowableValues = { "created",
                    "assigned", "received" })) @RequestParam String type,

            @Parameter(description = "Filter theo status (ch·ªâ cho assigned/received)", schema = @Schema(allowableValues = {
                    "IN_PROGRESS", "COMPLETED", "OVERDUE" })) @RequestParam(required = false) String status,

            @Parameter(description = "T·ª´ kh√≥a t√¨m ki·∫øm (search trong 5 fields): ID, title, content, instructions, notes", example = "urgent task") @RequestParam(required = false) String keyword,

            @Parameter(description = "Ng√†y b·∫Øt ƒë·∫ßu (format: yyyy-MM-dd)", example = "2025-08-01") @RequestParam(required = false) String startTime,

            @Parameter(description = "Ng√†y k·∫øt th√∫c (format: yyyy-MM-dd)", example = "2025-08-31") @RequestParam(required = false) String endTime,

            @Parameter(description = "Danh s√°ch priority ƒë·ªÉ filter", schema = @Schema(type = "array", allowableValues = {
                    "LOW", // üü¢ Kh√¥ng kh·∫©n c·∫•p - c√≥ th·ªÉ ho√£n
                    "NORMAL", // üîµ B√¨nh th∆∞·ªùng - c√¥ng vi·ªác th∆∞·ªùng ng√†y
                    "HIGH", // üü° Quan tr·ªçng - ·∫£nh h∆∞·ªüng ƒë·∫øn chuy·∫øn bay
                    "URGENT" // üî¥ Kh·∫©n c·∫•p - c·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c
            }, description = "LOW: Kh√¥ng kh·∫©n c·∫•p, NORMAL: B√¨nh th∆∞·ªùng, HIGH: Quan tr·ªçng, URGENT: Kh·∫©n c·∫•p")) @RequestParam(required = false) List<String> priorities,

            @Parameter(description = "Danh s√°ch Team IDs ƒë·ªÉ filter tasks giao cho teams (ch·ªâ cho assigned)", example = "1,2,3") @RequestParam(required = false) List<Integer> teamIds,

            @Parameter(description = "Danh s√°ch User IDs ƒë·ªÉ filter tasks giao cho users (ch·ªâ cho assigned)", example = "1,5,10") @RequestParam(required = false) List<Integer> userIds,

            @Parameter(description = "Danh s√°ch Unit IDs ƒë·ªÉ filter tasks giao cho units (ch·ªâ cho assigned)", example = "1,2") @RequestParam(required = false) List<Integer> unitIds,

            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)", example = "1") @RequestParam(required = false, defaultValue = "1") Integer page,

            @Parameter(description = "S·ªë items per page (max 100)", example = "20") @RequestParam(required = false, defaultValue = "20") Integer size) {
        if (!type.matches("created|assigned|received")) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Tham s·ªë type ph·∫£i l√†: created, assigned, ho·∫∑c received"));
        }

        // Validate status √°p d·ª•ng cho type=assigned v√† type=received
        if (status != null && !type.matches("assigned|received")) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Status ch·ªâ h·ªó tr·ª£ cho type=assigned v√† type=received"));
        }

        // Check if recipient search is used with non-assigned type
        boolean hasRecipientParams = (teamIds != null && !teamIds.isEmpty()) || 
                                   (userIds != null && !userIds.isEmpty()) || 
                                   (unitIds != null && !unitIds.isEmpty());
        
        if (hasRecipientParams && !"assigned".equals(type)) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Recipient search (teamIds/userIds/unitIds) ch·ªâ h·ªó tr·ª£ cho type=assigned"));
        }

        // Convert simplified parameters to recipientTypes/recipientIds format for service (only for assigned type)
        List<String> recipientTypes = new ArrayList<>();
        List<Integer> recipientIds = new ArrayList<>();
        
        if ("assigned".equals(type)) {
            // Parse teamIds -> TEAM + teamIds
            if (teamIds != null && !teamIds.isEmpty()) {
                for (Integer teamId : teamIds) {
                    recipientTypes.add("TEAM");
                    recipientIds.add(teamId);
                }
            }
            
            // Parse userIds -> USER + userIds  
            if (userIds != null && !userIds.isEmpty()) {
                for (Integer userId : userIds) {
                    recipientTypes.add("USER");
                    recipientIds.add(userId);
                }
            }
            
            // Parse unitIds -> UNIT + unitIds
            if (unitIds != null && !unitIds.isEmpty()) {
                for (Integer unitId : unitIds) {
                    recipientTypes.add("UNIT");
                    recipientIds.add(unitId);
                }
            }
        }

        // Check advanced search features
        boolean hasKeywordTimeOrPriority = keyword != null || startTime != null || endTime != null ||
                (priorities != null && !priorities.isEmpty());
        boolean hasRecipientSearch = !recipientTypes.isEmpty();

        // Validate status values
        if (status != null && !status.matches("IN_PROGRESS|COMPLETED|OVERDUE")) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Status ph·∫£i l√†: IN_PROGRESS, COMPLETED, ho·∫∑c OVERDUE"));
        }

        // Validate pagination parameters (1-based)
        if (page != null && page < 1) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Page ph·∫£i >= 1"));
        }
        if (size != null && (size <= 0 || size > 100)) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Size ph·∫£i t·ª´ 1 ƒë·∫øn 100"));
        }

        MyTasksData response;
        boolean hasAdvancedSearch = hasKeywordTimeOrPriority || hasRecipientSearch;

        if (hasAdvancedSearch) {
            // S·ª≠ d·ª•ng advanced search cho t·∫•t c·∫£ type v·ªõi c√°c feature ƒë∆∞·ª£c h·ªó tr·ª£
            response = taskService.getMyTasksWithAdvancedSearchAndPaginationOptimized(type, status, keyword,
                    startTime, endTime, priorities, recipientTypes, recipientIds, page, size);
        } else if (page != null || size != null) {
            // S·ª≠ d·ª•ng search th√¥ng th∆∞·ªùng v·ªõi pagination t·ªëi ∆∞u (DATABASE-LEVEL)
            response = taskService.getMyTasksWithCountStandardizedAndPaginationOptimized(type, status, page, size);
        } else {
            // üöÄ ULTRA FAST: S·ª≠ d·ª•ng batch loading optimization cho simple requests
            response = taskService.getMyTasksWithCountStandardizedUltraFast(type);

            // Apply status if specified (for assigned and received types)
            if (type.matches("assigned|received") && status != null && !status.isEmpty()) {
                // Fall back to standard method with status if ultra-fast doesn't support
                // filtering yet
                response = taskService.getMyTasksWithCountStandardized(type, status);
            }
        }

        return ResponseEntity.ok(ApiResponseCustom.success(response));
    }

    @GetMapping("/company")
    @Operation(summary = "API c√¥ng ty: L·∫•y t·∫•t c·∫£ c√¥ng vi·ªác theo ph√¢n quy·ªÅn v·ªõi advanced search, filter status, pagination", description = "üè¢ COMPANY API v·ªõi role-based permissions: "
            +
            "üìã PERMISSION LOGIC: " +
            "‚Ä¢ ADMIN/DIRECTOR/VICE_DIRECTOR: Xem T·∫§T C·∫¢ tasks trong h·ªá th·ªëng " +
            "‚Ä¢ C√°c role kh√°c: Xem tasks c·ªßa TEAM + tasks c·ªßa c√°c UNIT thu·ªôc team ƒë√≥ " +
            "üéØ STATUS FILTER: IN_PROGRESS, COMPLETED, OVERDUE " +
            "üîç KEYWORD SEARCH: T√¨m ki·∫øm trong 5 fields - ID, title, content, instructions, notes " +
            "‚ö° ADVANCED FILTERS: priorities (LOW/NORMAL/HIGH/URGENT), time range (yyyy-MM-dd) " +
            "üë• RECIPIENT SEARCH: teamIds, userIds, unitIds (ƒë∆°n gi·∫£n h∆°n recipientTypes/recipientIds) " +
            "üìÑ PAGINATION: page (1-based), size (max 100, default 20)")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = MyTasksApiResponse.class))),
            @ApiResponse(responseCode = "400", description = "Tham s·ªë kh√¥ng h·ª£p l·ªá", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class))),
            @ApiResponse(responseCode = "403", description = "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<MyTasksData>> getCompanyTasks(
            @Parameter(description = "Filter theo status", schema = @Schema(allowableValues = { "IN_PROGRESS",
                    "COMPLETED", "OVERDUE", "OPEN" })) @RequestParam(required = false) String status,

            @Parameter(description = "T·ª´ kh√≥a t√¨m ki·∫øm (search trong 5 fields): ID, title, content, instructions, notes", example = "urgent task") @RequestParam(required = false) String keyword,

            @Parameter(description = "Ng√†y b·∫Øt ƒë·∫ßu (format: yyyy-MM-dd)", example = "2025-08-01") @RequestParam(required = false) String startTime,

            @Parameter(description = "Ng√†y k·∫øt th√∫c (format: yyyy-MM-dd)", example = "2025-08-31") @RequestParam(required = false) String endTime,

            @Parameter(description = "Danh s√°ch priority ƒë·ªÉ filter", schema = @Schema(type = "array", allowableValues = {
                    "LOW", // üü¢ Kh√¥ng kh·∫©n c·∫•p - c√≥ th·ªÉ ho√£n
                    "NORMAL", // üîµ B√¨nh th∆∞·ªùng - c√¥ng vi·ªác th∆∞·ªùng ng√†y
                    "HIGH", // üü° Quan tr·ªçng - ·∫£nh h∆∞·ªüng ƒë·∫øn chuy·∫øn bay
                    "URGENT" // üî¥ Kh·∫©n c·∫•p - c·∫ßn x·ª≠ l√Ω ngay l·∫≠p t·ª©c
            }, description = "LOW: Kh√¥ng kh·∫©n c·∫•p, NORMAL: B√¨nh th∆∞·ªùng, HIGH: Quan tr·ªçng, URGENT: Kh·∫©n c·∫•p")) @RequestParam(required = false) List<String> priorities,

            @Parameter(description = "Danh s√°ch Team IDs ƒë·ªÉ filter tasks giao cho teams", example = "1,2,3") @RequestParam(required = false) List<Integer> teamIds,

            @Parameter(description = "Danh s√°ch User IDs ƒë·ªÉ filter tasks giao cho users", example = "1,5,10") @RequestParam(required = false) List<Integer> userIds,

            @Parameter(description = "Danh s√°ch Unit IDs ƒë·ªÉ filter tasks giao cho units", example = "1,2") @RequestParam(required = false) List<Integer> unitIds,

            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)", example = "1") @RequestParam(required = false, defaultValue = "1") Integer page,

            @Parameter(description = "S·ªë items per page (max 100)", example = "20") @RequestParam(required = false, defaultValue = "20") Integer size) {

        // Validate status values
        if (status != null && !status.matches("IN_PROGRESS|COMPLETED|OVERDUE|OPEN")) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Status ph·∫£i l√†: IN_PROGRESS, COMPLETED, OVERDUE, ho·∫∑c OPEN"));
        }

        // Validate pagination parameters (1-based)
        if (page != null && page < 1) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Page ph·∫£i >= 1"));
        }
        if (size != null && (size <= 0 || size > 100)) {
            return ResponseEntity.badRequest().body(
                    ApiResponseCustom.error("Size ph·∫£i t·ª´ 1 ƒë·∫øn 100"));
        }

        // Convert simplified parameters to recipientTypes/recipientIds format for service
        List<String> recipientTypes = new ArrayList<>();
        List<Integer> recipientIds = new ArrayList<>();
        
        // Parse teamIds -> TEAM + teamIds
        if (teamIds != null && !teamIds.isEmpty()) {
            for (Integer teamId : teamIds) {
                recipientTypes.add("TEAM");
                recipientIds.add(teamId);
            }
        }
        
        // Parse userIds -> USER + userIds  
        if (userIds != null && !userIds.isEmpty()) {
            for (Integer userId : userIds) {
                recipientTypes.add("USER");
                recipientIds.add(userId);
            }
        }
        
        // Parse unitIds -> UNIT + unitIds
        if (unitIds != null && !unitIds.isEmpty()) {
            for (Integer unitId : unitIds) {
                recipientTypes.add("UNIT");
                recipientIds.add(unitId);
            }
        }

        MyTasksData response;
        boolean hasRecipientSearch = !recipientTypes.isEmpty();
        boolean hasAdvancedSearch = keyword != null || startTime != null || endTime != null ||
                (priorities != null && !priorities.isEmpty()) || hasRecipientSearch;

        if (hasAdvancedSearch) {
            // S·ª≠ d·ª•ng advanced search v·ªõi role-based permissions v√† recipient search
            response = taskService.getCompanyTasksWithAdvancedSearchAndPagination(status, keyword,
                    startTime, endTime, priorities, recipientTypes, recipientIds, page, size);
        } else if (page != null || size != null) {
            // S·ª≠ d·ª•ng pagination v·ªõi role-based permissions
            response = taskService.getUnitTasksWithPagination(status, page, size);
        } else {
            // Simple request v·ªõi role-based permissions
            response = taskService.getUnitTasks(status);
        }

        return ResponseEntity.ok(ApiResponseCustom.success(response));
    }

    // M√î H√åNH ADJACENCY LIST: API Subtask
    @PostMapping("/{parentId}/subtasks")
    @Operation(summary = "T·∫°o subtask", description = "T·∫°o subtask con cho m·ªôt task cha")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "T·∫°o subtask th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task cha", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<TaskDTO>> createSubtask(@PathVariable Integer parentId,
            @RequestBody CreateSubtaskRequest request) {
        // parentId ƒë∆∞·ª£c truy·ªÅn qua path parameter, truy·ªÅn tr·ª±c ti·∫øp v√†o service
        TaskDTO created = taskService.createSubtask(parentId, request);
        return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponseCustom.created(created));
    }

    @GetMapping("/{id}/subtasks")
    @Operation(summary = "L·∫•y danh s√°ch subtask", description = "L·∫•y t·∫•t c·∫£ subtask con c·ªßa m·ªôt task")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskSubtasksApiResponse.class)))
    })
    public ResponseEntity<ApiResponseCustom<List<TaskDetailDTO>>> getSubtasks(@PathVariable Integer id) {
        List<TaskDetailDTO> subtasks = taskService.getSubtasks(id);
        return ResponseEntity.ok(ApiResponseCustom.success(subtasks));
    }

    @GetMapping("/{id}/subtree")
    @Operation(summary = "L·∫•y to√†n b·ªô c√¢y con c·ªßa task (flat list)", description = "L·∫•y task c√πng v·ªõi t·∫•t c·∫£ subtask d∆∞·ªõi d·∫°ng flat list")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskSubtreeApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<List<TaskSubtreeDTO>>> getTaskSubtree(@PathVariable Integer id) {
        List<TaskSubtreeDTO> subtree = taskService.getTaskSubtreeAsSubtreeDTO(id);

        if (subtree.isEmpty()) {
            return ResponseEntity.status(404).body(
                    ApiResponseCustom.notFound("Kh√¥ng t√¨m th·∫•y task v·ªõi ID: " + id));
        }

        return ResponseEntity.ok(ApiResponseCustom.success(subtree));
    }

    @GetMapping("/{id}/tree")
    @Operation(summary = "L·∫•y to√†n b·ªô c√¢y con c·ªßa task (hierarchical structure)", description = "L·∫•y task c√πng v·ªõi t·∫•t c·∫£ subtask theo c·∫•u tr√∫c ph√¢n c·∫•p nested - d·ªÖ d√†ng cho frontend hi·ªÉn th·ªã tree view")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskTreeApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<TaskTreeDTO>> getTaskTree(@PathVariable Integer id) {
        TaskTreeDTO taskTree = taskService.getTaskSubtreeHierarchical(id);

        if (taskTree == null) {
            return ResponseEntity.status(404).body(
                    ApiResponseCustom.notFound("Kh√¥ng t√¨m th·∫•y task v·ªõi ID: " + id));
        }

        return ResponseEntity.ok(ApiResponseCustom.success(taskTree));
    }

    // Existing endpoints...

    // === ATTACHMENT MANAGEMENT ===
    // Attachment ch·ªâ ƒë∆∞·ª£c qu·∫£n l√Ω th√¥ng qua createTask v√† updateTask
    // ƒê√£ lo·∫°i b·ªè c√°c API ri√™ng bi·ªát ƒë·ªÉ g√°n/g·ª° attachment v√¨ kh√¥ng c·∫ßn thi·∫øt

    @GetMapping("/{id}/attachments")
    @Operation(summary = "L·∫•y danh s√°ch file ƒë√≠nh k√®m c·ªßa task", description = "L·∫•y t·∫•t c·∫£ file ƒë√≠nh k√®m tr·ª±c ti·∫øp c·ªßa task")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskAttachmentsApiResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task", content = @Content(schema = @Schema(implementation = ApiResponseCustom.class)))
    })
    public ResponseEntity<ApiResponseCustom<List<AttachmentDTO>>> getTaskAttachments(@PathVariable Integer id) {
        List<AttachmentDTO> attachments = taskService.getTaskAttachments(id);
        return ResponseEntity.ok(ApiResponseCustom.success(attachments));
    }

    @PostMapping("/{id}/attachments")
    @Operation(summary = "Th√™m file ƒë√≠nh k√®m v√†o task", description = "Th√™m c√°c file ƒë√≠nh k√®m ƒë√£ upload v√†o task c·ª• th·ªÉ. File ƒë√≠nh k√®m ph·∫£i ƒë∆∞·ª£c upload tr∆∞·ªõc th√¥ng qua /api/attachments/generate-upload-urls v√† confirm-upload")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√™m file ƒë√≠nh k√®m th√†nh c√¥ng", content = @Content(schema = @Schema(implementation = TaskAttachmentsApiResponse.class))),
            @ApiResponse(responseCode = "400", description = "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task ho·∫∑c attachment"),
            @ApiResponse(responseCode = "409", description = "Attachment ƒë√£ ƒë∆∞·ª£c g√°n v√†o task kh√°c")
    })
    public ResponseEntity<ApiResponseCustom<List<AttachmentDTO>>> addAttachmentsToTask(
            @PathVariable Integer id,
            @Valid @RequestBody TaskAttachmentUploadRequest request) {
        try {
            List<AttachmentDTO> addedAttachments = taskService.addAttachmentsToTask(id, request.getAttachmentIds());

            return ResponseEntity.ok(ApiResponseCustom.success(addedAttachments));

        } catch (RuntimeException e) {
            if (e.getMessage().contains("Kh√¥ng t√¨m th·∫•y")) {
                return ResponseEntity.status(404).body(ApiResponseCustom.notFound(e.getMessage()));
            } else if (e.getMessage().contains("ƒë√£ ƒë∆∞·ª£c g√°n v√†o task kh√°c")) {
                return ResponseEntity.status(409).body(ApiResponseCustom.error(e.getMessage()));
            } else {
                return ResponseEntity.status(400).body(ApiResponseCustom.error(e.getMessage()));
            }
        } catch (Exception e) {
            return ResponseEntity.status(500)
                    .body(ApiResponseCustom.internalError("L·ªói server khi th√™m file ƒë√≠nh k√®m: " + e.getMessage()));
        }
    }

    @DeleteMapping("/{id}/attachments")
    @Operation(summary = "X√≥a file ƒë√≠nh k√®m kh·ªèi task", description = "X√≥a c√°c file ƒë√≠nh k√®m kh·ªèi task c·ª• th·ªÉ. File s·∫Ω kh√¥ng b·ªã x√≥a vƒ©nh vi·ªÖn m√† ch·ªâ ƒë∆∞·ª£c g·ª° li√™n k·∫øt kh·ªèi task")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "X√≥a file ƒë√≠nh k√®m th√†nh c√¥ng"),
            @ApiResponse(responseCode = "400", description = "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y task")
    })
    public ResponseEntity<Map<String, Object>> removeAttachmentsFromTask(
            @PathVariable Integer id,
            @Valid @RequestBody TaskAttachmentUploadRequest request) {
        try {
            int removedCount = taskService.removeAttachmentsFromTask(id, request.getAttachmentIds());

            String message = String.format("ƒê√£ x√≥a %d file ƒë√≠nh k√®m kh·ªèi task th√†nh c√¥ng", removedCount);
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", message,
                    "statusCode", 200,
                    "data", Map.of(
                            "taskId", id,
                            "removedCount", removedCount,
                            "removedAttachmentIds", request.getAttachmentIds())));

        } catch (RuntimeException e) {
            if (e.getMessage().contains("Kh√¥ng t√¨m th·∫•y")) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(
                        "success", false,
                        "message", e.getMessage(),
                        "statusCode", 404,
                        "data", null));
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", e.getMessage(),
                        "statusCode", 400,
                        "data", null));
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "success", false,
                    "message", "L·ªói server khi x√≥a file ƒë√≠nh k√®m: " + e.getMessage(),
                    "statusCode", 500,
                    "data", null));
        }
    }

    // ============== SEARCH & FILTER ENDPOINTS ==============

    // ===================================================================
    // OVERDUE MANAGEMENT ENDPOINTS
    // ===================================================================

    @PostMapping("/force-update-overdue")
    @Operation(summary = "Force update overdue status", description = "Manually trigger overdue status update for all assignments and tasks. Useful for testing or immediate update without waiting for scheduled job.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Overdue update completed successfully"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<ApiResponseCustom<Map<String, Object>>> forceUpdateOverdueStatus() {
        try {
            // Trigger manual overdue update
            overdueTaskService.forceUpdateOverdueStatus();
            
            return ResponseEntity.ok(ApiResponseCustom.success(Map.of(
                    "message", "Overdue status update completed successfully",
                    "executedAt", java.time.LocalDateTime.now().toString(),
                    "note", "All assignments and tasks have been checked and updated if overdue"
            )));
            
        } catch (Exception e) {
            return ResponseEntity.status(500)
                    .body(ApiResponseCustom.internalError("Failed to update overdue status: " + e.getMessage()));
        }
    }

    // ===================================================================
    // TASK HIERARCHY & SUBTASK ENDPOINTS
    // ===================================================================

}
